Imports System.Data.Entity.Infrastructure
Imports System.Data.SqlClient
Imports FactorEntidades
Imports System.Data.Entity
Imports System.Data.Entity.Validation
Imports System.Transactions
Imports Nelibur.ObjectMapper
Imports NPOI.SS.UserModel
Imports NPOI.XSSF.UserModel
Imports NPOI.HSSF.UserModel
Imports System.IO
Imports System.Reflection
Imports System.ComponentModel


Public Class UtilitiesDAL

  Public Function ConsultaParametros(clave As String, ByRef parametro As String) As Result
    Dim response = New Result(False)

    Using context As New FactorContext

      Try
        Dim values = (From a In context.parametros
                 Where a.clave = clave
                 Select a).SingleOrDefault()

        parametro = values.ruta

        response.Ok = True
      Catch ex As Exception
        response.Mensaje = "Error al consultar los parámetros"
      End Try

    End Using

    Return response
  End Function

  Function Base64Decode(ByVal base64String)
    'rfc1521
    '1999 Antonin Foller, Motobit Software, http://Motobit.cz
    Const Base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    Dim dataLength, sOut, groupBegin

    'remove white spaces, If any
    base64String = Replace(base64String, vbCrLf, "")
    base64String = Replace(base64String, vbTab, "")
    base64String = Replace(base64String, " ", "")

    'The source must consists from groups with Len of 4 chars
    dataLength = Len(base64String)

    If dataLength Mod 4 <> 0 Then
      Err.Raise(1, "Base64Decode", "Bad Base64 string.")
      Return Nothing
    End If


    ' Now decode each group:
    For groupBegin = 1 To dataLength Step 4
      Dim numDataBytes, CharCounter, thisChar, thisData, nGroup, pOut
      ' Each data group encodes up To 3 actual bytes.
      numDataBytes = 3
      nGroup = 0

      For CharCounter = 0 To 3
        ' Convert each character into 6 bits of data, And add it To
        ' an integer For temporary storage.  If a character is a '=', there
        ' is one fewer data byte.  (There can only be a maximum of 2 '=' In
        ' the whole string.)

        thisChar = Mid(base64String, groupBegin + CharCounter, 1)

        If thisChar = "=" Then
          numDataBytes = numDataBytes - 1
          thisData = 0
        Else
          thisData = InStr(1, Base64, thisChar, vbBinaryCompare) - 1
        End If
        If thisData = -1 Then
          Err.Raise(2, "Base64Decode", "Bad character In Base64 string.")
          Return Nothing
        End If

        nGroup = 64 * nGroup + thisData
      Next

      'Hex splits the long To 6 groups with 4 bits
      nGroup = Hex(nGroup)

      'Add leading zeros
      nGroup = String.Format(6 - Len(nGroup), "0") & nGroup

      'Convert the 3 byte hex integer (6 chars) To 3 characters
      pOut = Chr(CByte("&H" & Mid(nGroup, 1, 2))) + _
        Chr(CByte("&H" & Mid(nGroup, 3, 2))) + _
        Chr(CByte("&H" & Mid(nGroup, 5, 2)))

      'add numDataBytes characters To out string
      sOut = sOut & Left(pOut, numDataBytes)
    Next

    Base64Decode = sOut
  End Function

  Function ConvertToDataTable(Of T)(data As IList(Of T)) As DataTable
    Dim properties As PropertyDescriptorCollection = TypeDescriptor.GetProperties(GetType(T))
    Dim table As New DataTable(GetType(T).Name)
    For Each prop As PropertyDescriptor In properties
      table.Columns.Add(prop.Name, If(Nullable.GetUnderlyingType(prop.PropertyType), prop.PropertyType))
    Next
    For Each item As T In data
      Dim row As DataRow = table.NewRow()
      For Each prop As PropertyDescriptor In properties
        row(prop.Name) = If(prop.GetValue(item), DBNull.Value)
      Next
      table.Rows.Add(row)
    Next
    Return table
  End Function


  'Public Function ExportToExcel(Of T)(data As IList(Of T)) As HSSFWorkbook
  '  Dim tiposTexto As List(Of String) = New List(Of String)({"Char", "String"})
  '  Dim tiposNumero As List(Of String) = New List(Of String)({"Int16", "Int32", "Int64", "UInt16", "UInt32", "UInt64", "Decimal", "Byte", "Single", "SByte", "Double", "Integer", "Long", "Short", "UInteger", "ULong", "UShort"})
  '  Dim tiposFecha As List(Of String) = New List(Of String)({"Date", "DateTime"})

  '  Dim Encabezados = data.First().GetType().GetProperties().Select(Function(f) f.Name).ToArray()

  '  Dim Valores = (From c In data
  '                 Select c.GetType().GetProperties().Select(Function(f) If(f.GetValue(c), String.Empty)).ToArray())

  '  Dim sExcel As HSSFWorkbook = New HSSFWorkbook()
  '  Dim sHoja As HSSFSheet = sExcel.CreateSheet("Hoja1")
  '  Dim iFormatoCelda As HSSFDataFormat = sExcel.CreateDataFormat()
  '  Dim iEstiloCelda As HSSFCellStyle = sExcel.CreateCellStyle()

  '  ' Insertamos los encabezados
  '  Dim sRow As HSSFRow = sHoja.CreateRow(0)
  '  Dim sEnc = 0
  '  For Each sEncabezado As String In Encabezados
  '    sRow.CreateCell(sEnc).SetCellValue(sEncabezado)
  '    sEnc = sEnc + 1
  '  Next

  '  ' Insertamos los datos
  '  Dim posX = 1, posY = 0
  '  For Each sValores() As Object In Valores
  '    sRow = sHoja.CreateRow(posX)
  '    For Each sValor As Object In sValores

  '      If tiposNumero.Contains(sValor.GetType().Name) Then
  '        Dim celda = sRow.CreateCell(posY)
  '        celda.SetCellValue(CDbl(If(sValor, 0)))
  '        'celda.CellStyle = iEstiloDefault
  '      End If

  '      If tiposFecha.Contains(sValor.GetType().Name) Then
  '        ' CREAMOS EL FORMATO PARA EL CAMPO FECHA
  '        Dim celda = sRow.CreateCell(posY)
  '        celda.SetCellValue((CDate(If(sValor, New Date()))))
  '        celda.CellStyle = iEstiloCelda
  '        celda.CellStyle.DataFormat = iFormatoCelda.GetFormat("yyyy-MM-dd HH:mm:ss")
  '      End If

  '      If tiposTexto.Contains(sValor.GetType().Name) Then
  '        sRow.CreateCell(posY).SetCellValue(If(sValor, String.Empty).ToString.Trim)
  '      End If

  '      If sValor.GetType.Name = "Boolean" Then
  '        sRow.CreateCell(posY).SetCellValue(IIf(CBool(If(sValor, False)), "VERDADERO", "FALSO").ToString)
  '      End If

  '      posY = posY + 1
  '    Next
  '    posY = 0
  '    posX = posX + 1
  '  Next

  '  Return sExcel
  'End Function


End Class
