Imports FactorEntidades
Imports System.Data.Entity

Public Class UsuarioDAL

#Region "Constructor"

#End Region

#Region "Metodos de consulta"
	Function ValidarUsuario(ByRef model As UsuarioConsulta, userid As String, password As Integer) As Result

		Dim respuesta = New Result(False)
		Using context As New FactorContext
			Try
				model = (From u In context.usuarios
					Join s In context.sucursal
					On u.sucursal Equals s.sucursal1
					Join p In context.perfil
					On u.perfil Equals p.idPerfil
					Where u.userid = userid AndAlso u.password = password And u.activo = True
					Select New UsuarioConsulta With {
					.user = u,
					.sucursal = s,
					.perfil = p,
					.fec_pass = u.fec_pass,
					.id = u.id}).SingleOrDefault()


				If model IsNot Nothing Then
					model.permisos = (From A In context.usuarios
							 Join B In context.Acceso
							 On A.perfil Equals B.idPerfil
							 Join C In context.Permiso
							 On B.IdPermiso Equals C.IdPermiso
							 Join D In context.perfil
							 On B.idPerfil Equals D.idPerfil
							 Where D.activo = 1 And C.activo = 1 And A.userid = userid
							 Select B.IdPermiso).ToList()
				End If

				respuesta.Ok = True
			Catch e As Exception
				respuesta.Detalle = e.Message
			End Try
		End Using

		Return respuesta

	End Function

	Public Function ConsultaUsuarioDAL(ByRef model As List(Of UsuarioEntidad)) As Result

		Dim respuesta = New Result(False)

		Using context As New FactorContext
			Try
				model = (From p In context.usuarios
					  Select New UsuarioEntidad With {.id = p.id, .nombre = p.nombre.TrimEnd(), .puesto = p.puesto, .activo = If(p.activo = True, "SI", "NO"), .userid = p.userid}).ToList()
				respuesta.Ok = True
			Catch e As Exception
				respuesta.Detalle = e.Message
			End Try

		End Using

		Return respuesta

	End Function

	Function ConsultaDetalleUsuarioDAL(id As Int32, ByRef model As usuarios) As Result
		Dim respuesta = New Result(False)
		Using context As New FactorContext
			Try
				model = (From p In context.usuarios
					Where p.id = id).SingleOrDefault()
				If model IsNot Nothing Then
					respuesta.Ok = True
				End If
			Catch e As Exception
				respuesta.Detalle = e.Message
				respuesta.Id_Out = 1
			End Try

		End Using
		Return respuesta
	End Function
#End Region

#Region "Metodos Transaccionales"
	Public Function ActualizarUsuario(model As usuarios) As Result
		Dim respuesta = New Result(False)
		Using context As New FactorContext
			Try

				Dim user = context.usuarios.Where(Function(x) x.id = model.id).SingleOrDefault()

				If user IsNot Nothing Then
					user.userid = model.userid
					user.nombre = model.nombre
					user.puesto = model.puesto
					user.email = model.email
					user.sucursal = model.sucursal
					user.activo = model.activo
					user.firmante = model.firmante
					user.perfil = model.perfil

				End If

				context.SaveChanges()
				respuesta.Ok = True
			Catch e As Exception
				respuesta.Detalle = e.Message
			End Try

		End Using

		Return respuesta
	End Function

	Public Function AltaUsuario(model As usuarios) As Result
		Dim respuesta = New Result(False)
		Using context As New FactorContext
			Try
				context.usuarios.Add(model)
				context.SaveChanges()
				respuesta.Ok = True
			Catch e As Exception
				respuesta.Detalle = e.Message
			End Try

		End Using

		Return respuesta

	End Function
#End Region

	Function MandarContrasenDAL(userid As String, ca As String, pw As Integer) As Result
		Dim respuesta = New Result(False)
		Using context As New FactorContext

			Try
				Dim userweb = context.usuarios.Where(Function(x) x.userid = userid).SingleOrDefault()

				If userweb IsNot Nothing Then

					Dim consulta = New mail.sendMail()

					Dim listTo As String()
					Dim cc As String = ""
					Dim subject As String = "Código temporal"
					Dim body As String = ""

					userweb.password = pw
					userweb.fec_pass = Date.Now().AddDays(-1)

					listTo = userweb.email.Split(";")

					body = "<p>Buen Día.<br>"
					body = body & "Usuario : " + userid + "<br>"
					body = body & "___________________________________________________________________________________________ <br></p>"
					body = body & "<p>Atentamente<br>"
					body = body & "Banco Ve por Más, S.A. - Factoraje</p>"

					consulta.enviarMail(listTo, subject, body, Net.Mail.MailPriority.Normal, Nothing, Nothing, Nothing)


					body = "<p>Buen Día.<br>"
					body = body & "Password : " + ca + "<br>"
					body = body & "___________________________________________________________________________________________ <br></p>"
					body = body & "<p>Atentamente<br>"
					body = body & "Banco Ve por Más, S.A. - Factoraje</p>"

					consulta.enviarMail(listTo, subject, body, Net.Mail.MailPriority.Normal, Nothing, Nothing, Nothing)
					context.SaveChanges()
					respuesta.Ok = True

				End If
			Catch e As Exception
				respuesta.Detalle = e.Message
			End Try

		End Using

		Return respuesta
	End Function

	Function resetPasswordDAL(id As Integer, ca As String, pw As String) As Result
		Dim respuesta = New Result(False)
		Using context As New FactorContext

			Try
				Dim userweb = context.usuarios.Where(Function(x) x.id = id).SingleOrDefault()

				If userweb IsNot Nothing Then

					Dim consulta = New mail.sendMail()

					Dim listTo As String()
					Dim cc As String = ""
					Dim subject As String = "Código temporal"
					Dim body As String = ""

					userweb.password = pw
					userweb.fec_pass = Date.Now().AddDays(-1)

					listTo = userweb.email.Split(";")

					body = "<p>Buen Día.<br>"
					body = body & "Password : " + ca + "<br>"
					body = body & "___________________________________________________________________________________________ <br></p>"
					body = body & "<p>Atentamente<br>"
					body = body & "Banco Ve por Más, S.A. - Factoraje</p>"

					consulta.enviarMail(listTo, subject, body, Net.Mail.MailPriority.Normal, Nothing, Nothing, Nothing)
					context.SaveChanges()
					respuesta.Ok = True

				End If
			Catch e As Exception
				respuesta.Detalle = e.Message
			End Try

		End Using

		Return respuesta
	End Function

	Function ActualizarPassworResetDAL(userid As Integer, nueva As String, pw As String) As Result
		Dim respuesta = New Result(False)
		Using context As New FactorContext
			Try
				Dim user = context.usuarios.Where(Function(x) x.id = userid).SingleOrDefault()

				If user IsNot Nothing Then
					user.password = pw
					user.fec_pass = Date.Now.AddDays(90)

					context.SaveChanges()

					respuesta.Ok = True
				Else
					respuesta.Mensaje = "Usuario invalido"
				End If
			Catch e As Exception
				respuesta.Detalle = e.Message
			End Try

		End Using

		Return respuesta
	End Function

End Class
