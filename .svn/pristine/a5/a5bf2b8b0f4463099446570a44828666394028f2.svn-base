Imports FactorDAL
Imports FactorEntidades

Public Class Manager

#Region "Paridad"

	Function ConsultaParidadBAL(fechaMes As String, fechaAnio As String, ByRef model As List(Of ParidadEntidad)) As Result

		Dim paridad = New ParidadDAL()
		Return paridad.ConsultaParidadDAL(fechaMes, fechaAnio, model)

	End Function

	Function ConsultaParidadDetalleBAL(fecha As String, ByRef model As paridad) As Result

		Dim paridad = New ParidadDAL()
		Return paridad.ConsultaParidadDetalleDAL(fecha, model)


	End Function

	Function AltaParidad(model As paridad) As Result
		Dim paridad = New ParidadDAL()
		
		Return paridad.AltaParidad(model)


	End Function

	Function ActualizarParidad(model As paridad) As Result
		Dim paridad = New ParidadDAL()
		Return paridad.ActualizarParidad(model)


	End Function

	'Function BorrarParidad(fecha As String)
	'	Dim paridad = New ParidadDAL()

	'	Try
	'		Return paridad.BorrarParidad(fecha)
	'	Catch ex As Exception
	'		Throw ex
	'	End Try
	'End Function

#End Region

#Region "Proveedores"
	Function ConsultaProveedorBAL(sucursal As Int16, ByRef model As List(Of ProveedorEntidad)) As Result

		Dim proveedor = New ProveedorDAL()
		Return proveedor.ConsultaProveedorDAL(sucursal, model)

	End Function

	Function AltaProveedor(model As proveedor) As Result
		Dim proveedor = New ProveedorDAL()

		Return proveedor.AltaProveedor(model)

	End Function

	Function ConsultaDetalleProveedorBAL(deudor As Int32, ByRef model As proveedor) As Result

		Dim proveedor = New ProveedorDAL()
		Return proveedor.ConsultaDetalleProveedorDAL(deudor, model)

	End Function

	Function ActualizarProveedor(model As proveedor) As Result
		Dim proveedor = New ProveedorDAL()
		Return proveedor.ActualizarProveedor(model)


	End Function

#End Region

#Region "Comprador"

	Function ConsultaCompradorBAL(sucursal As Int16, ByRef model As List(Of ProveedorEntidad)) As Result

		Dim comprador = New CompradorDAL()
		Return comprador.ConsultaCompradorDAL(sucursal, model)

	End Function

	Function ConsultaDetalleCompradorBAL(deudor As Int32, ByRef model As comprador) As Result

		Dim comprador = New CompradorDAL()
		Return comprador.ConsultaDetalleCompradorDAL(deudor, model)

	End Function

	Function ActualizarComprador(model As comprador) As Result
		Dim comprador = New CompradorDAL()
		Return comprador.ActualizarComprador(model)
	End Function

	Function Altacomprador(model As comprador) As Result
		Dim comprador = New CompradorDAL()

		Return comprador.AltaComprador(model)

	End Function

#End Region

#Region "Indicadores Financieros"

	'Listado
	Function ConsultaIndicadoresBAL(fechaMes As String, fechaAnio As String, ByRef model As List(Of FinancieroEntidad)) As Result
		Dim indicador = New IndicadoresDAL()
		Return indicador.ConsultaIndicadorDAL(fechaMes, fechaAnio, model)
	End Function
	'Detalle
	Function ConsultaIndicadorDetalleBAL(fecha As String, ByRef model As indicadores) As Result
		Dim indicador = New IndicadoresDAL()
		Return indicador.ConsultaIndicadorDetalleDAL(fecha, model)
	End Function
	'Alta
	Function AltaIndicador(model As indicadores) As Result
		Dim indicador = New IndicadoresDAL()
		Return indicador.AltaIndicador(model)
	End Function
	'Actualizacion 
	Function ActualizarIndicador(model As indicadores) As Result
		Dim indicador = New IndicadoresDAL()
		Return indicador.ActualizarIndicador(model)
	End Function

#End Region

#Region "Sucursal"
	Function ConsultaSucursalBAL(ByRef model As List(Of SucursalEntidad)) As Result

		Dim sucursal = New SucursalDAL()
		Return sucursal.ConsultaSucursal(model)

	End Function

	Function ConsultaDetalleSucursalBAL(suc As Int32, ByRef model As sucursal) As Result

		Dim sucursal = New SucursalDAL()
		Return sucursal.ConsultaDetalleSucursalDAL(suc, model)

	End Function

	Function ActualizarSucursal(model As sucursal) As Result
		Dim sucursal = New SucursalDAL()
		Return sucursal.ActualizarSucursal(model)
	End Function

	Function AltaSucursal(model As sucursal) As Result
		Dim sucursal = New SucursalDAL()
		Return sucursal.AltaSucursal(model)
	End Function

#End Region

#Region "Codigos de Garantia"
	Function ConsultaCodigoGarantiaBAL(ByRef model As List(Of CodigoGarantiaEntidad)) As Result

		Dim codigo = New CodigoGarantiaDAL()
		Return codigo.ConsultaCodigoGarantiaDAL(model)

	End Function

	Function ConsultaDetalleCodigoGarantiaBAL(codigoid As Int32, ByRef model As codigogarantia) As Result

		Dim codigo = New CodigoGarantiaDAL()
		Return codigo.ConsultaDetalleCodigoGarantiaDAL(codigoid, model)

	End Function

	Function ActualizarCodigoGarantia(model As codigogarantia) As Result
		Dim codigo = New CodigoGarantiaDAL()
		Return codigo.ActualizarCodigoGarantia(model)
	End Function

	Function AltaCodigoGarantia(model As codigogarantia) As Result
		Dim codigo = New CodigoGarantiaDAL()
		Return codigo.AltaCodigoGarantia(model)
	End Function
#End Region

#Region "Codigos de Garantia"
	Function ConsultaTipoGarantiaBAL(ByRef model As List(Of TipoGarantiaEntidad)) As Result

		Dim codigo = New TipoGarantiaDAL()
		Return codigo.ConsultaTipoGarantiaDAL(model)

	End Function

	Function ConsultaDetalleTipoGarantiaBAL(tipoid As Int32, ByRef model As tipogarantia) As Result

		Dim codigo = New TipoGarantiaDAL()
		Return codigo.ConsultaDetalleTipoGarantiaDAL(tipoid, model)

	End Function

	Function ActualizarTipoGarantia(model As tipogarantia) As Result
		Dim codigo = New TipoGarantiaDAL()
		Return codigo.ActualizarTipoGarantia(model)
	End Function

	Function AltaTipoGarantia(model As tipogarantia) As Result
		Dim codigo = New TipoGarantiaDAL()
		Return codigo.AltaTipoGarantia(model)
	End Function
#End Region

#Region "Clientes"
	Function ConsultaClienteBAL(ByRef model As List(Of ClienteEntidad)) As Result

		Dim cliente = New ClienteDAL()
		Return cliente.ConsultaClienteDAL(model)

	End Function

	Function ConsultaDetalleClienteBAL(clienteid As Int32, ByRef model As clientes) As Result
		Dim cliente = New ClienteDAL()
		Return cliente.ConsultaDetalleClienteDAL(clienteid, model)
	End Function

	Function ActualizarCliente(model As clientes) As Result
		Dim cliente = New ClienteDAL()
		Return cliente.ActualizarCliente(model)
	End Function

	Function AltaCliente(model As clientes) As Result
		Dim cliente = New ClienteDAL()
		Return cliente.AltaCliente(model)
	End Function
#End Region

#Region "Promotor"

	Function ConsultaPromotorBAL(promprod As Boolean, ByRef model As List(Of DropDownEntidad)) As Result

		Dim dropdown = New DropDownDAL()
		Return dropdown.ConsultaPromotorDAL(promprod, model)

	End Function

	Function ConsultaListaPromotorBAL(sucursal As Integer, ByRef model As List(Of PromotorEntidad)) As Result

		Dim promotor = New PromotorDAL()
		Return promotor.ConsultaPromotorDAL(sucursal, model)

	End Function

	Function ConsultaDetallePromotorBAL(clave As Int32, ByRef model As promotor) As Result

		Dim promotor = New PromotorDAL()
		Return promotor.ConsultaDetallePromotorDAL(clave, model)

	End Function

	Function ActualizarPromotor(model As promotor) As Result
		Dim promotor = New PromotorDAL()
		Return promotor.ActualizarPromotor(model)
	End Function

	Function AltaPromotor(model As promotor) As Result
		Dim promotor = New PromotorDAL()
		Return promotor.AltaPromotor(model)
	End Function

#End Region

#Region "grupos"
	Function ConsultaGrupoEmpresarialBAL(ByRef model As List(Of DropDownEntidad)) As Result

		Dim grupo = New DropDownDAL()
		Return grupo.ConsultaGrupoEmpresarialDAL(model)

	End Function
#End Region

#Region "Ciudades"
	Function ConsultaCiudadesBAL(ByRef model As List(Of DropDownEntidad)) As Result

		Dim dropdown = New DropDownDAL()
		Return dropdown.ConsultaCiudadesDAL(model)

	End Function
#End Region

#Region "Estados"
	Function ConsultaEstadosBAL(ByRef model As List(Of DropDownEntidad)) As Result

		Dim dropdown = New DropDownDAL()
		Return dropdown.ConsultaEstadosDAL(model)

	End Function
#End Region

#Region "Seguridad"
	Function ValidarUsuario(ByRef model As UsuarioConsulta, userid As String, password As String) As Result

		Dim user = New UsuarioDAL()
		' ---IMPORTANTE--- ESTA LOGICA SOLO ES PARA AMBIENTE DE DESARROLLO ELIMINAR UNA VEZ EN PRODUCCION '
		If password Is Nothing Then
			password = ""
		End If
		'--------------------------------------------------------------------------------------------------
		Dim pass = New Utility().Encripta(password, Enumerador.eTipoEncriptacion.eTipoPassword)
		Return user.ValidarUsuario(model, userid, pass)

	End Function

#End Region

#Region "BusquedaGlobal"
	Function BusquedaGlobalBAL(BusquedaTxt As String,
							   ByRef cliente As List(Of ClienteEntidad),
							   ByRef proveedor As List(Of ProveedorEntidad),
							   ByRef comprador As List(Of ProveedorEntidad),
							   ByRef promotor As List(Of PromotorEntidad)) As Result
		Dim busqueda = New ClienteDAL()
		Return busqueda.BusquedaGlobalDAL(BusquedaTxt, cliente, proveedor, comprador, promotor)
	End Function
#End Region

#Region "Usuarios"
	Function ConsultaUsuariosBAL(ByRef model As List(Of UsuarioEntidad)) As Result
		Dim cliente = New UsuarioDAL()
		Return cliente.ConsultaUsuarioDAL(model)
	End Function

	Function ConsultaDetalleUsuarioBAL(id As Int32, ByRef model As usuarios) As Result
		Dim usuario = New UsuarioDAL()
		Return usuario.ConsultaDetalleUsuarioDAL(id, model)
	End Function

	Function ActualizarUsuario(model As usuarios) As Result
		Dim usuario = New UsuarioDAL()
		Return usuario.ActualizarUsuario(model)
	End Function

	Function AltaUsuario(model As usuarios) As Result
		Dim usuario = New UsuarioDAL()
		Return usuario.AltaUsuario(model)
	End Function
#End Region

#Region "Perfil"
	Function ConsultaPerfilBAL(ByRef model As List(Of DropDownEntidad)) As Result
		Dim perfil = New DropDownDAL()
		Return perfil.ConsultaPerfilesDAL(model)
	End Function
#End Region

#Region "Control Riesgo"

	Function ConsultaControlRiesgoBAL(ClienteId As Integer, ByRef model As ControlRiesgo_Cliente) As Result
		Dim proc = New Procesos()
		Return proc.ConsultaControlRiesgoDAL(ClienteId, model)
	End Function

	Function ActualizarControlRiesgoBAL(ByRef model As clientes) As Result
		Dim proc = New Procesos()
		Return proc.ActualizarControlRiesgoDAL(model)
	End Function

	Function ActualizarAsociarLineasBAL(ByRef model As ControlRiesgo) As Result
		Dim proc = New Procesos()
		Return proc.ActualizarAsociarLineasDAL(model)
	End Function

	Function consultaLineasBAL(clienteId As Integer, ByRef entidad As ControlRiesgo) As Result
		Dim proc = New Procesos()
		entidad.idmultiple = Guid.NewGuid().ToString("N").Substring(0, 9)
		Return proc.consultaLineasDAL(clienteId, entidad)
	End Function

	Function DesasociarLineasBAL(clienteId As Integer) As Result
		Dim proc = New Procesos()
		Return proc.DesasociarLineasDAL(clienteId)
	End Function

	Function ConsultaGarantiaLiquidaBAL(idRec As String, ByRef entidad As linea) As Result
		Dim proc = New Procesos()
		Return proc.ConsultaGarantiaLiquidaDAL(idRec, entidad)
	End Function

	Function ActualizarGarantiaLiquidaBAL(ByRef model As linea) As Result
		Dim proc = New Procesos()
		Return proc.ActualizarGarantiaLiquidaDAL(model)
	End Function

	Function CancelarLineaBAL(idRec As String) As Result
		Dim proc = New Procesos()
		Return proc.CancelarLineaDAL(idRec)
	End Function

#End Region

#Region "Giros"

	Function ConsultaGirosBAL(ByRef model As List(Of DropDownEntidad)) As Result

		Dim giro = New DropDownDAL()
		Return giro.ConsultaGirosDAL(model)

	End Function

#End Region

End Class
