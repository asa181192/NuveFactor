Imports FactorEntidades
Imports System.Data.Entity
Imports System.IO
Imports System.Globalization
Imports System.Data.SqlClient
Imports System.Transactions

Public Class FacturacionDAL

#Region "Consultas"

    Public Function ConsultaFacturasDAL(ByRef model As List(Of FacturacionEntidad), serie As String, fecha As Date) As Result
        Dim resp = New Result(False)

        Dim fechaInicial As Date = fecha
        Dim fechaFin As Date

        fechaInicial = fechaInicial.AddDays(-fechaInicial.Day + 1) 'Primer día de mes
        fechaFin = fechaInicial.AddDays(-fechaInicial.Day + 1).AddMonths(1).AddDays(-1) 'Último día del mes

        Using context As New FactorContext

            Try
                Dim values = (From a In context.fiscalpf
                         Join b In context.clientes On a.id Equals b.cliente
                         Where a.serie = serie And a.identidad = 1 And (a.fecha >= fechaInicial And a.fecha <= fechaFin)
                         Select New FacturacionEntidad With {.fecha = a.fecha, .idfiscalpf = a.idfiscalpf, .sat = a.sat,
                                                             .folio = a.folio, .sisfol = a.sisfol, .contrato = a.contrato, .nombre = b.nombre,
                                                             .importe = a.importe, .cancelado = a.cancelado, .manual = a.manual, .serie = a.serie,
                                                             .moneda = a.moneda, .impresiones = a.impresiones, .distrib = a.distrib, .emision = a.emision}).Union(
                         From a In context.fiscalpf
                         Join b In context.proveedor On a.id Equals b.deudor
                         Where a.serie = serie And a.identidad = 2 And (a.fecha >= fechaInicial And a.fecha <= fechaFin)
                         Select New FacturacionEntidad With {.fecha = a.fecha, .idfiscalpf = a.idfiscalpf, .sat = a.sat,
                                                             .folio = a.folio, .sisfol = a.sisfol, .contrato = a.contrato, .nombre = b.nombre,
                                                             .importe = a.importe, .cancelado = a.cancelado, .manual = a.manual, .serie = a.serie,
                                                             .moneda = a.moneda, .impresiones = a.impresiones, .distrib = a.distrib, .emision = a.emision}).Union(
                         From a In context.fiscalpf
                         Join b In context.comprador On a.id Equals b.deudor
                         Where a.serie = serie And a.identidad = 3 And (a.fecha >= fechaInicial And a.fecha <= fechaFin)
                         Select New FacturacionEntidad With {.fecha = a.fecha, .idfiscalpf = a.idfiscalpf, .sat = a.sat,
                                                             .folio = a.folio, .sisfol = a.sisfol, .contrato = a.contrato, .nombre = b.nombre,
                                                             .importe = a.importe, .cancelado = a.cancelado, .manual = a.manual, .serie = a.serie,
                                                             .moneda = a.moneda, .impresiones = a.impresiones, .distrib = a.distrib, .emision = a.emision}).ToList()

                For Each x As FacturacionEntidad In values

                    Dim a As New FacturacionEntidad

                    a.fecha = x.fecha
                    a.idfiscalpf = x.idfiscalpf
                    a.ssat = IIf(x.sat > 0, "BF", "")
                    a.sat = x.sat
                    a.folio = x.folio
                    a.sisfol = x.sisfol
                    a.contrato = x.contrato
                    a.nombre = x.nombre.Trim()
                    a.importe = x.importe
                    a.cancel = IIf(x.cancelado, "Cancelado", "Vigente")
                    a.generated = IIf(x.manual, "M", "A")
                    a.divisa = IIf(x.moneda = 1, "MXN", "DLLS")
                    a.impresiones = x.impresiones
                    a.distrib = x.distrib
                    a.emision = x.emision
                    a.serie = x.serie

                    model.Add(a)

                Next

                resp.Ok = True
            Catch ex As Exception
                resp.Mensaje = "Error al consultar el historial de notificaciones"
                resp.Detalle = ex.InnerException.ToString()
            End Try
        End Using
        Return resp
    End Function

    Function ConsultaDetalleDAL(ByRef list As List(Of fiscalpv), sisfol As Integer, serie As String) As Result
        Dim resultado = New Result(False)

        Using context As New FactorContext

            Try

                list = (From a In context.fiscalpv
                    Where a.serie = serie And a.sisfol = sisfol
                    Select a).ToList()

                resultado.Ok = True

            Catch ex As Exception
                resultado.Mensaje = "No se pudó consultar la información, verfique nuevamente."
            End Try

        End Using

        Return resultado
    End Function

    Public Function GetConceptos(serie As String, ByRef model As List(Of cfiscales)) As Result
        Dim resp = New Result(False)

        Using context As New FactorContext

            Try
                model = (From a In context.cfiscales
                         Where a.serie = serie).ToList()

                resp.Ok = True
            Catch ex As Exception

            End Try

        End Using

        Return resp

    End Function

    Public Function GetContratoDAL(contrato As Integer, ByRef model As FacturacionEntidad) As Result
        Dim result = New Result(False)

        Using context As New FactorContext

            Try

                model = (From a In context.contratos
                         Join b In context.clientes On a.cliente Equals b.cliente
                         Where a.contrato = contrato
                         Select New FacturacionEntidad With {.contrato = a.contrato, .cliente = a.cliente, .nombre = b.nombre}).SingleOrDefault()

                result.Ok = True
            Catch ex As Exception
                result.Mensaje = "Error al consultar contrato"
            End Try

        End Using

        Return result
    End Function

    Function GetIdDAL(deudor As Integer, id As Integer, ByRef name As String) As Result
        Dim resultado = New Result(False)

        Using context As New FactorContext

            Try
                Select Case id
                    Case Is = 1

                        name = (From a In context.clientes
                                  Where a.cliente = deudor
                                  Select a.nombre).SingleOrDefault()

                    Case Is = 2
                        name = (From a In context.proveedor
                                Where a.deudor = deudor
                                Select a.nombre).SingleOrDefault()

                    Case Is = 3
                        name = (From a In context.comprador
                                Where a.deudor = deudor
                                Select a.nombre).SingleOrDefault()

                End Select

                resultado.Ok = True
                resultado.Mensaje = "0"
            Catch ex As Exception
                resultado.Mensaje = "Error al consultar nombre del "
            End Try

        End Using

        Return resultado
    End Function

    Function CargaConceptosDAL(ByRef list As List(Of cfiscales), tipo As String) As Result
        Dim result As New Result(False)

        Using context As New FactorContext

            Try
                list = (From a In context.cfiscales
                        Where a.serie = tipo).ToList()

                result.Ok = True
            Catch ex As Exception
                result.Mensaje = "No se pudieron obtener los conceptos."

            End Try

        End Using

        Return result
    End Function

    Function GetPorcentajeDAL(contrato As Integer, ByRef porcentaje As Decimal) As Result
        Dim resultado = New Result(False)

        Using context As New FactorContext

            Try
                porcentaje = (From a In context.contratos
                          Join b In context.sucursal On a.sucursal Equals b.sucursal1
                          Where a.contrato = contrato
                          Select b.iva).SingleOrDefault()

                resultado.Ok = True
            Catch ex As Exception
                resultado.Mensaje = ex.Message
            End Try


        End Using

        Return resultado
    End Function

    Function ValidDoctosDAL(sisfol As Integer, serie As String, ByRef model As FacturacionEntidad) As Result
        Dim result = New Result(False)
        Dim pagosAdeudos = New pagosadeudos
        Dim deudor = New FacturacionEntidad
        Dim aF As Boolean = False
        Dim aA As Boolean = False
        Dim fol As Integer = 0

        Using context As New FactorContext

            Try

                pagosAdeudos = (From a In context.pagosadeudos
                                Where a.serie = serie And a.sisfol = sisfol And a.movto = "CR" And a.cancelado = False
                                Select a).SingleOrDefault()

                If pagosAdeudos IsNot Nothing Then
                    result.Mensaje = "Al documento se le aplicó una nota de crédito anteriormente."
                Else

                    Dim adeudo = New FacturacionEntidad
                    Dim factura = New FacturacionEntidad

                    adeudo = (From a In context.adeudos
                              Where a.serie = serie And a.sisfol = sisfol
                              Select New FacturacionEntidad With {.identidad = a.identidad, .contrato = a.contrato,
                                                                  .id = a.id, .saldo = a.monto, .folio = a.docto,
                                                                  .moneda = a.moneda}).SingleOrDefault()

                    Dim id As Integer = 0
                    Dim identidad As Integer = 0
                    Dim contrato As Integer = 0
                    Dim saldo As Decimal = 0

                    If adeudo IsNot Nothing Then
                        id = adeudo.id
                        identidad = adeudo.identidad
                        contrato = adeudo.contrato
                        saldo = adeudo.saldo
                        aA = True
                        fol = adeudo.folio

                    Else

                        factura = (From a In context.fiscalpf
                                   Where a.serie = serie And a.sisfol = sisfol
                                   Select New FacturacionEntidad With {.identidad = a.identidad, .contrato = a.contrato,
                                                                       .id = a.id, .saldo = a.importe, .folio = a.folio,
                                                                       .moneda = a.moneda}).SingleOrDefault()

                        If factura IsNot Nothing Then

                            id = factura.id
                            identidad = factura.identidad
                            contrato = factura.contrato
                            saldo = factura.saldo
                            aF = True
                            fol = factura.folio

                        End If

                    End If

                    Select Case identidad
                        Case Is = 1
                            deudor = (From a In context.clientes
                                      Where a.cliente = id
                                      Select New FacturacionEntidad With {.nombre = a.nombre, .sucursal = a.sucursal}).SingleOrDefault()

                        Case Is = 2
                            deudor = (From a In context.proveedor
                                      Where a.deudor = id
                                      Select New FacturacionEntidad With {.nombre = a.nombre, .sucursal = a.sucursal}).SingleOrDefault()

                        Case Is = 3
                            deudor = (From a In context.comprador
                                      Where a.deudor = id
                                      Select New FacturacionEntidad With {.nombre = a.nombre, .sucursal = a.sucursal}).SingleOrDefault()

                    End Select

                    If factura IsNot Nothing Or adeudo IsNot Nothing Then

                        model = (From a In context.contratos
                                 Join b In context.clientes On a.cliente Equals b.cliente
                                 Where a.contrato = contrato
                                 Select New FacturacionEntidad With {.nombre = b.nombre, .contrato = a.contrato, .moneda = a.moneda, .cliente = a.cliente, .sucursal = a.sucursal, .saldo = saldo}).SingleOrDefault()

                        model.aplicarAdeudo = aA
                        model.aplicarFactura = aF
                        model.folio = fol

                        result.Mensaje = "0"

                    Else
                        result.Mensaje = "No tiene contrato"
                    End If

                End If

                result.Ok = True

            Catch ex As Exception
                result.Mensaje = ex.Message
            End Try

        End Using

        Return result
    End Function

#End Region

#Region "Transacciones"

    Public Function CancelarFacturaDAL(serie As String, sisfol As Integer) As Result
        Dim response = New Result(False)
        Dim model As New List(Of pagosadeudos)

        Using context As New FactorContext

            model = (From a In context.pagosadeudos
                     Where a.serie = serie And a.sisfol = sisfol And a.cancelado = False
                     Select a).ToList()


            If model.Count() > 0 Then
                response.Ok = "La factura tiene pagos realizados, no puede ser cancelada."
            Else



            End If




        End Using

        Return response
    End Function

    Function GuardarFacturaDAL(model As FacturacionEntidad) As Result
        Dim resultado = New Result(False)

        Using context As New FactorContext

            Dim parameters = New List(Of SqlParameter)
            parameters.Add(New SqlParameter("@Contrato", model.contrato))
            parameters.Add(New SqlParameter("@identidad", model.identidad))
            parameters.Add(New SqlParameter("@id", model.id))
            parameters.Add(New SqlParameter("@monto", model.base))
            parameters.Add(New SqlParameter("@concepto", model.txtConcepto.Trim()))
            parameters.Add(New SqlParameter("@tipo", model.tipo))
            parameters.Add(New SqlParameter("@iva", model.iva))
            parameters.Add(New SqlParameter("@serie", model.serie))
            parameters.Add(New SqlParameter("@Genadeudo", 1))
            parameters.Add(New SqlParameter("@seguro", 0))
            parameters.Add(New SqlParameter("@ivaseguro", 0))
            Try

                context.Database.ExecuteSqlCommand("Exec [dbo].[SP_Facturamanual ] " +
                                                                 "@Contrato, " +
                                                                 "@identidad, " +
                                                                 "@id, " +
                                                                 "@monto, " +
                                                                 "@concepto, " +
                                                                 "@tipo, " +
                                                                 "@iva, " +
                                                                 "@serie, " +
                                                                 "@Genadeudo, " +
                                                                 "@seguro, " +
                                                                 "@ivaseguro", parameters.ToArray())

                resultado.Ok = True
            Catch ex As Exception
                resultado.Mensaje = ex.Message
            End Try

        End Using

        Return resultado

    End Function

    Function GuardarNotaCreditoDAL(model As FacturacionEntidad, ByRef process As Boolean) As Result
        Dim result = New Result(False)
        Dim adeudos = New adeudos


        If model.importe <= model.saldo Then

            Using scope As New TransactionScope

                Using context As New FactorContext

                    Try

                        If model.aplicarAdeudo Then

                            adeudos = (From a In context.adeudos
                                       Where a.serie = model.serie And a.sisfol = model.sisfol
                                       Select a).SingleOrDefault()

                            Dim saldo As Decimal = adeudos.saldo - model.importe

                            adeudos.saldo = saldo

                            context.SaveChanges()

                        End If

                        Dim pagos = New PagosAdeudosEntidad

                        If model.aplicarAdeudo Then

                            pagos = (From a In context.adeudos
                                     Where a.serie = model.serie2 And a.sisfol = model.sisfol
                                     Select New PagosAdeudosEntidad With {.id = a.id, .contrato = a.contrato, .identidad = a.identidad, .tipo = a.tipo}).SingleOrDefault()
                        Else
                            pagos = (From a In context.fiscalpf
                                     Where a.serie = model.serie2 And a.sisfol = model.sisfol
                                     Select New PagosAdeudosEntidad With {.id = a.id, .contrato = a.contrato, .identidad = a.identidad}).SingleOrDefault()

                        End If


                        GuardarFacturaDAL(model)

                        Dim pAdeudos = New pagosadeudos

                        pAdeudos.tipo = IIf(model.aplicarFactura, "IF", pagos.tipo)
                        pAdeudos.serie = model.serie
                        pAdeudos.sisfol = model.sisfol
                        pAdeudos.docto = model.folio
                        pAdeudos.id = model.id
                        pAdeudos.contrato = model.contrato
                        pAdeudos.fecha = Date.Now().Date
                        pAdeudos.movto = "CR"
                        pAdeudos.importe = model.importe
                        pAdeudos.identidad = pagos.identidad
                        pAdeudos.referencia = model.sisfol
                        pAdeudos.idctabanco = 0
                        pAdeudos.cheque = 0
                        pAdeudos.concepto = "Notas de crédito"

                        context.pagosadeudos.Add(pAdeudos)
                        context.SaveChanges()
                        result.Ok = True
                        result.Mensaje = "La nota de crédito se guardó correctamente."
                        process = True
                        scope.Complete()
                    Catch ex As Exception
                        result.Mensaje = ex.Message
                    End Try

                End Using

            End Using

        Else
            result.Mensaje = "Importe excede saldo del documento."
            process = False
            result.Ok = True
        End If

        Return result
    End Function

#End Region

    Function GuardarRemisionesDAL(ByRef model As FacturacionEntidad, ByRef process As Boolean) As Result
        Dim result = New Result(False)

        Using scope As New TransactionScope

            Try

                result = GuardarFacturaDAL(model)

                scope.Complete()
            Catch ex As Exception
                result.Mensaje = ex.Message
            End Try

        End Using

        Return result
    End Function

    Function GetFacturaFileDAL(factura As String, ByRef archivo As Byte(), tipo As Integer) As Result

        Dim response = New Result(False)
        Dim proxy = New Proxy()

        Try
            Select Case tipo
                Case Is = 1
                    Try
                        response = proxy.GetPdfResult(factura, archivo)
                        response.Ok = True
                    Catch ex As Exception
                        response.Mensaje = ex.Message
                    End Try

                Case Is = 2
                    Try
                        response = proxy.GetXmlResult(factura, archivo)
                        response.Ok = True
                    Catch ex As Exception
                        response.Mensaje = ex.Message
                    End Try

            End Select

            If archivo Is Nothing Then
                response.Mensaje = "No existe comprobante fiscal para este documento.(DAL)"
                response.Ok = True
            End If

        Catch ex As Exception
            response.Mensaje = ex.Message
        End Try

        Return response
    End Function



End Class
