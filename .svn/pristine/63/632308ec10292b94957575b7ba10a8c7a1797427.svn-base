Imports FactorEntidades
Imports Nelibur.ObjectMapper
Imports nuve.TesoreriaModel
Imports FactorBAL
Imports System.Web.Script.Serialization

Namespace nuve
    Public Class TesoreriaController
        Inherits System.Web.Mvc.Controller


#Region "Menu"
        <CustomAuthorize>
        <HttpGet>
        Function Index() As ViewResult

            Dim model As New Helpers.Menu

            model.sMenu = "<div class=""BoxFlex"" id="""" >"
            model.sMenu &= "<div class=""BoxFlexShadow"">"
            model.sMenu &= "<label>Regresar</label>"
            model.sMenu &= "<a href=""../Home/Welcome""> <img src=""../Images/regresar_gris.png""/> </a>"
            model.sMenu &= "</div>"
            model.sMenu &= "</div>"

            model.sMenu &= "<div class=""BoxFlex"" id=""dvflexCuentasBancos"" >"
            model.sMenu &= "<div class=""BoxFlexShadow"">"
            model.sMenu &= "<p>Cuentas</p>"
            'model.sMenu &= "<img src=""../Images/cuentasBancos.png""/> </a>"
            model.sMenu &= "</div>"
            model.sMenu &= "</div>"

            model.sMenu &= "<div class=""BoxFlex"" id=""dvflexmovimientos"" >"
            model.sMenu &= "<div class=""BoxFlexShadow"">"
            model.sMenu &= "<p>Movimientos</p>"
            'model.sMenu &= "<img src=""../Images/cuentasBancos.png""/> </a>"
            model.sMenu &= "</div>"
            model.sMenu &= "</div>"

            Return View(model)
        End Function

        Function CuentasBancos() As ViewResult

            Dim model As New Helpers.Menu

            model.sMenu = "<div class=""BoxFlex"" id="""" >"
            model.sMenu &= "<div class=""BoxFlexShadow"">"
            model.sMenu &= "<label>Regresar</label>"
            model.sMenu &= "<a href=""../Tesoreria/Index""> <img src=""../Images/regresar_gris.png""/> </a>"
            model.sMenu &= "</div>"
            model.sMenu &= "</div>"

            model.sMenu &= "<div class=""BoxFlex"" id=""dvflexBancos"" >"
            model.sMenu &= "<div class=""BoxFlexShadow"">"
            model.sMenu &= "<p>Bancos</p>"

            model.sMenu &= "</div>"
            model.sMenu &= "</div>"

            model.sMenu &= "<div class=""BoxFlex"" id=""dvflexCuentas"" >"
            model.sMenu &= "<div class=""BoxFlexShadow"">"
            model.sMenu &= "<p>Cuentas</p>"

            model.sMenu &= "</div>"
            model.sMenu &= "</div>"

            Return View(model)

        End Function

#End Region

#Region "Views"

        Function cuentas() As ViewResult
            Return View()

        End Function

        Function movimientos() As ViewResult
            Dim model = New MovimientosModels
            model.Cargacontroles()
            Return View(model)

        End Function

#End Region

#Region "Get"

#Region "Cuentas"

        Public Function ObtenerCuentasBanco(cancelado As Boolean) As ActionResult

            Dim jresult
            Dim resultado
            Dim consulta = New TesoreriaBAL()

            Dim listaCuentas = New List(Of cuentasEntidad)

            resultado = consulta.ConsultaCuentasBAL(cancelado, listaCuentas)

            If resultado.Ok And resultado IsNot Nothing Then
                jresult = Json(New With {Key .Results = listaCuentas}, JsonRequestBehavior.AllowGet)
            Else
                resultado.Mensaje = "Ocurrio un error al consultar la informacion"
                jresult = Json(New With {Key .Mensaje = "ERR!!" + resultado.Mensaje + "!!" + resultado.Detalle}, JsonRequestBehavior.AllowGet)
            End If



            Return jresult

        End Function

        Public Function ObtenerDetalleCuenta(ctaid As Integer) As ActionResult

            Dim model = New TesoreriaModel.CuentasModel
            Dim consulta = New TesoreriaBAL()
            Dim cuenta = New cuentasEntidad

            If ctaid > 0 Then

                Dim resultado = consulta.ConsultaCuentaDetalle(ctaid, cuenta)
                TinyMapper.Bind(Of cuentas, TesoreriaModel.CuentasModel)()
                model = TinyMapper.Map(Of TesoreriaModel.CuentasModel)(cuenta)

            End If

            model.Cargacontroles()


            Return PartialView(model)

        End Function

#End Region

#Region "Movimientos"
        Public Function CancelarMovimiento(numrec As Integer) As ActionResult

            Dim model = New MovimientosModels
            Dim consulta = New TesoreriaBAL
            Dim movimiento = New MovimientosEntidad

            Dim resultado = consulta.cancelarMovimientoBAL(numrec)
            TinyMapper.Bind(Of MovimientosEntidad, MovimientosModels)()
            model = TinyMapper.Map(Of MovimientosModels)(movimiento)

            Return Json(New With {Key .Result = resultado.Ok, .Text = resultado.Mensaje, .Tipo = resultado.Tipo})

        End Function

        Public Function ObtenerDetalleMovimiento(numrec As Integer, folio As Integer, tipo As String, idcta As Integer) As ActionResult

            Dim model = New MovimientosModels
            Dim consulta = New TesoreriaBAL
            Dim movimiento = New MovimientosEntidad
            Dim vista As String = ""

            If numrec > 0 Then
                movimiento.tipo = tipo
                movimiento.folio = folio
                movimiento.numrec = numrec
                Dim resultado = consulta.consultaMovimientoDetalleBAL(numrec, movimiento)
                TinyMapper.Bind(Of MovimientosEntidad, MovimientosModels)()
                model = TinyMapper.Map(Of MovimientosModels)(movimiento)
            Else
                model.concconta = ""
                model.idctabanco = idcta
                model.fecha = Date.Now
                model.tipo = tipo
                model.contrato = 0
                model.entrada = 0
                model.salida = 0
                model.impresiones = 0
                model.ficha = 0


            End If

            Return PartialView(model)


        End Function

        Public Function consultaMovimientos(fecIni As String, idcta As Integer) As ActionResult

            Dim jresult = New JsonResult()
            Dim resultado
            Dim consulta = New TesoreriaBAL()
            Dim model = New MovimientosModels
            Dim serial = New JavaScriptSerializer


            Dim listMov = New List(Of MovimientosEntidad)

            resultado = consulta.ConsultaMovimientosBAL(Date.Parse(fecIni), idcta, listMov)

            If resultado.Ok And resultado IsNot Nothing Then
                jresult = Json(New With {Key .Results = listMov}, JsonRequestBehavior.AllowGet)
                jresult.MaxJsonLength = Integer.MaxValue

            Else
                resultado.Mensaje = "Ocurrio un error al consultar la informacion"
                jresult = Json(New With {Key .Mensaje = "ERR!!" + resultado.Mensaje + "!!" + resultado.Detalle}, JsonRequestBehavior.AllowGet)

            End If

            Return jresult

        End Function

        Public Function consultaContrato(contrato As Integer) As ActionResult

            Dim model = New MovimientosEntidad
            Dim resultado
            Dim jresult = New JsonResult()
            Dim consulta = New TesoreriaBAL()



            resultado = consulta.consultaContratoBAL(contrato, model)

            If resultado.ok Then
                If model IsNot Nothing Then
                    jresult = Json(New With {Key .nombre = model.nombre}, JsonRequestBehavior.AllowGet)
                    jresult.MaxJsonLength = Integer.MaxValue
                Else
                    resultado.Mensaje = "El contrato no existe, favor de verificar."
                    jresult = Json(New With {Key .Mensaje = resultado.Mensaje + resultado.Detalle}, JsonRequestBehavior.AllowGet)

                End If
            Else
                resultado.Mensaje = "Ocurrio un error al consultar la informacion"
                jresult = Json(New With {Key .Mensaje = "ERR!!" + resultado.Mensaje + "!!  " + resultado.Detalle}, JsonRequestBehavior.AllowGet)

            End If

            Return jresult
        End Function


#End Region


#End Region

#Region "POST"

#Region "Cuentas"

        <HttpPost>
        Public Function GuardarCuenta(modelC As CuentasModel) As ActionResult

            Dim resultado
            Dim bs = New TesoreriaBAL()
            TinyMapper.Bind(Of CuentasModel, cuentas)()
            Dim model = TinyMapper.Map(Of cuentas)(modelC)

            If model.idctabanco = 0 Then

                model.fecha = Date.Today

                resultado = bs.altaCuentaBancoBAL(model)
                If resultado.OK And resultado IsNot Nothing Then
                    resultado.mensaje = "Registro Guardado"
                    resultado.tipo = Enumerador.eTipoTransaccion.eAlta
                End If

            Else

                resultado = bs.actualizarBancoBAL(model)
                If resultado.ok And resultado IsNot Nothing Then
                    resultado.Mensaje = "Registro actualizado"
                    resultado.tipo = Enumerador.eTipoTransaccion.eActualizar
                Else
                    resultado.Mensaje = String.Format("Ocurrio un error al tratar de actualizar el registro {0}" + "tipo de error: {1}", Environment.NewLine, resultado.Detalle)

                End If

            End If

            Return Json(New With {Key .Result = resultado.Ok, .Text = resultado.Mensaje, .Tipo = resultado.Tipo})

        End Function

#End Region

#Region "Movimientos"

        <HttpPost>
        Public Function GuardarMovimiento(modelM As MovimientosModels) As ActionResult

            Dim resultado
            Dim bs = New TesoreriaBAL()
            TinyMapper.Bind(Of MovimientosModels, MovimientosEntidad)()
            Dim model = TinyMapper.Map(Of MovimientosEntidad)(modelM)

            If modelM.numrec = 0 Then

                model.fecha = Date.Today
                resultado = bs.altaMovimientoBAL(model)
                If resultado.ok And resultado IsNot Nothing Then
                    resultado.tipo = Enumerador.eTipoTransaccion.eAlta
                    resultado.mensaje = "Movimiento Generado"
                End If

            Else
                resultado = bs.actualizarMovimientoBAL(model)
                If resultado.ok And resultado IsNot Nothing Then
                    resultado.tipo = Enumerador.eTipoTransaccion.eActualizar
                    resultado.mensaje = "Movimiento Actualizado"
                Else
                    resultado.Mensaje = String.Format("Ocurrio un error al tratar de actualizar el registro {0}" + "tipo de error: {1}", Environment.NewLine, resultado.Detalle)
                End If
            End If

            Return Json(New With {Key .Result = resultado.Ok, .Text = resultado.Mensaje, .Tipo = resultado.Tipo})

        End Function

        

#End Region

#End Region

    End Class

End Namespace
