Imports FactorEntidades
Imports Nelibur.ObjectMapper
Imports nuve.TesoreriaModel
Imports FactorBAL

Namespace nuve
    Public Class TesoreriaController
        Inherits System.Web.Mvc.Controller


#Region "Menu"
        <CustomAuthorize>
                <HttpGet>
        Function Index() As ViewResult

            Dim model As New Helpers.Menu

            model.sMenu = "<div class=""BoxFlex"" id="""" >"
            model.sMenu &= "<div class=""BoxFlexShadow"">"
            model.sMenu &= "<label>Regresar</label>"
            model.sMenu &= "<a href=""../Home/Welcome""> <img src=""../Images/regresar_gris.png""/> </a>"
            model.sMenu &= "</div>"
            model.sMenu &= "</div>"

            model.sMenu &= "<div class=""BoxFlex"" id=""dvflexCuentasBancos"" >"
            model.sMenu &= "<div class=""BoxFlexShadow"">"
            model.sMenu &= "<p>Cuentas & Bancos</p>"
            model.sMenu &= "<img src=""../Images/cuentasBancos.png""/> </a>"
            model.sMenu &= "</div>"
            model.sMenu &= "</div>"

            Return View(model)
        End Function

        Function CuentasBancos() As ViewResult

            Dim model As New Helpers.Menu

            model.sMenu = "<div class=""BoxFlex"" id="""" >"
            model.sMenu &= "<div class=""BoxFlexShadow"">"
            model.sMenu &= "<label>Regresar</label>"
            model.sMenu &= "<a href=""../Tesoreria/Index""> <img src=""../Images/regresar_gris.png""/> </a>"
            model.sMenu &= "</div>"
            model.sMenu &= "</div>"

            model.sMenu &= "<div class=""BoxFlex"" id=""dvflexBancos"" >"
            model.sMenu &= "<div class=""BoxFlexShadow"">"
            model.sMenu &= "<p>Bancos</p>"

            model.sMenu &= "</div>"
            model.sMenu &= "</div>"

            model.sMenu &= "<div class=""BoxFlex"" id=""dvflexCuentas"" >"
            model.sMenu &= "<div class=""BoxFlexShadow"">"
            model.sMenu &= "<p>Cuentas</p>"

            model.sMenu &= "</div>"
            model.sMenu &= "</div>"

            Return View(model)

        End Function

#End Region

#Region "Views"

        Function cuentas() As ViewResult

            Return View()

        End Function


#End Region

#Region "Get"

        Public Function ObtenerCuentasBanco(cancelado As Boolean) As ActionResult

            Dim jresult
            Dim resultado
            Dim consulta = New TesoreriaBAL()

            Dim listaCuentas = New List(Of cuentasEntidad)

            resultado = consulta.ConsultaCuentasBAL(cancelado, listaCuentas)

            If resultado.Ok And resultado IsNot Nothing Then
                jresult = Json(New With {Key .Results = listaCuentas}, JsonRequestBehavior.AllowGet)
            Else
                resultado.Mensaje = "Ocurrio un error al consultar la informacion"
                jresult = Json(New With {Key .Mensaje = "ERR!!" + resultado.Mensaje + "!!" + resultado.Detalle}, JsonRequestBehavior.AllowGet)
            End If

            Return jresult

        End Function


        Public Function ObtenerDetalleCuenta(ctaid As Integer) As ActionResult

            Dim model = New TesoreriaModel.CuentasModel
            Dim consulta = New TesoreriaBAL()
            Dim cuenta = New cuentasEntidad

            If ctaid > 0 Then

                Dim resultado = consulta.ConsultaCuentaDetalle(ctaid, cuenta)
                TinyMapper.Bind(Of cuentas, TesoreriaModel.CuentasModel)()
                model = TinyMapper.Map(Of TesoreriaModel.CuentasModel)(cuenta)
                
            

            End If
            
            model.Cargacontroles()
            model.cargaBancos()

            Return PartialView(model)

        End Function


#End Region


#Region "POST"

        <HttpPost>
        Public Function GuardarCuenta(modelC As CuentasModel) As ActionResult

            Dim resultado
            Dim bs = New TesoreriaBAL()
            TinyMapper.Bind(Of CuentasModel, cuentas)()
            Dim model = TinyMapper.Map(Of cuentas)(modelC)

            If model.idctabanco = 0 Then

                model.fecha = Date.Now

                resultado = bs.altaCuentaBancoBAL(model)
                If resultado.OK And resultado IsNot Nothing Then
                    resultado.mensaje = "Registro Guardado"
                    resultado.tipo = Enumerador.eTipoTransaccion.eAlta
                End If

            Else

                resultado = bs.actualizarBancoBAL(model)
                If resultado.ok And resultado IsNot Nothing Then
                    resultado.Mensaje = "Registro actualizado"
                    resultado.tipo = Enumerador.eTipoTransaccion.eActualizar
                Else
                    resultado.Mensaje = String.Format("Ocurrio un error al tratar de actualizar el registro {0}" + "tipo de error: {1}", Environment.NewLine, resultado.Detalle)

                End If

            End If

            Return Json(New With {Key .Result = resultado.Ok, .Text = resultado.Mensaje, .Tipo = resultado.Tipo})

        End Function


#End Region




    End Class

End Namespace
